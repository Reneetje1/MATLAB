clear; 
x1=3;                                                                       % Define input values. Would be live changing values in the application
y1=0;
z1=0;
r1=3;
x2=0;
y2=3;
z2=0;
r2=4;
x3=0;
y3=0;
z3=3;
r3=2;

sympref('FloatingPointOutput',true);                                        % Set it so that the displayed values are floating point and not symbolic (decimal numbers, not exact)
syms x y z;                                                                 % Define the symbolic variables
    
eq1 = (x - x1)^2 + (y - y1)^2 + (z - z1)^2 == r1^2;                         % Define the equations for the three spheres
eq2 = (x - x2)^2 + (y - y2)^2 + (z - z2)^2 == r2^2;
eq3 = (x - x3)^2 + (y - y3)^2 + (z - z3)^2 == r3^2;

solutions = solve([eq1, eq2, eq3], [x, y, z]);                              % Solve the equations for x, y and z

if ~isempty(solutions.x)                                                    % Display the intersection point(s) if they exist
    intersection_points = [solutions.x, solutions.y, solutions.z];
    disp('Intersection point(s):');
    disp(intersection_points);

    xo1 = intersection_points(1,1);                                         % Name each coordinate
    yo1 = intersection_points(1,2);
    zo1 = intersection_points(1,3);
    xo2 = intersection_points(2,1);
    yo2 = intersection_points(2,2);
    zo2 = intersection_points(2,3);

    figure;                                                                 % Create a 3D plot
    hold on;

    [X1, Y1, Z1] = sphere;                                                  % Plot the first sphere. line 39 makes values for a standard sphere with its center on (0,0,0) and a radius of 1
    X1 = X1 * r1 + x1;                                                      % Shift the centerpoint and increase the radius by multiplying with the radius * the corresponding center coordinate
    Y1 = Y1 * r1 + y1;                                                      % repeat for y
    Z1 = Z1 * r1 + z1;                                                      % Repeat for z
    surf(X1, Y1, Z1, 'FaceAlpha', 0.10);                                    % use surface plot to plot the sphere

    [X2, Y2, Z2] = sphere;                                                  % Plot the second sphere
    X2 = X2 * r2 + x2;
    Y2 = Y2 * r2 + y2;
    Z2 = Z2 * r2 + z2;
    surf(X2, Y2, Z2, 'FaceAlpha', 0.10);

    [X3, Y3, Z3] = sphere;                                                  % Plot the third sphere
    X3 = X3 * r3 + x3;
    Y3 = Y3 * r3 + y3;
    Z3 = Z3 * r3 + z3;
    surf(X3, Y3, Z3, 'FaceAlpha', 0.10);

    % Mark the intersection point
    plot3(intersection_points(1,1), intersection_points(1,2), intersection_points(1,3), 'r.', 'MarkerSize', 30);
    plot3(intersection_points(2,1), intersection_points(2,2), intersection_points(2,3), 'r.', 'MarkerSize', 30);

    line(2*xlim(), [0,0], [0,0],'LineWidth',1,'Color','k');
    line([0,0], 2*ylim(), [0,0],'LineWidth',1,'Color','k');
    line([0,0], [0,0], 2*zlim(),'LineWidth',1,'Color','k');
    
    xlabel('X');
    ylabel('Y');
    zlabel('Z');
    axis equal;
    grid on;

    hold off;
else
    disp('No intersection point(s) found.');
end
